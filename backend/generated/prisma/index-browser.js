
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DepartmentScalarFieldEnum = {
  DepartmentID: 'DepartmentID',
  DepartmentName: 'DepartmentName'
};

exports.Prisma.FacultyScalarFieldEnum = {
  FacultyID: 'FacultyID',
  FirstName: 'FirstName',
  LastName: 'LastName',
  Gender: 'Gender',
  DOB: 'DOB',
  Role: 'Role',
  Phone_no: 'Phone_no',
  Email: 'Email',
  DepartmentID: 'DepartmentID'
};

exports.Prisma.SubjectTaughtScalarFieldEnum = {
  FacultyID: 'FacultyID',
  Level: 'Level',
  SubjectName: 'SubjectName',
  CourseCode: 'CourseCode',
  ProgramName: 'ProgramName',
  Note: 'Note'
};

exports.Prisma.FacultyQualificationScalarFieldEnum = {
  QualificationID: 'QualificationID',
  FacultyID: 'FacultyID',
  Degree: 'Degree',
  Institution: 'Institution',
  YearOfCompletion: 'YearOfCompletion'
};

exports.Prisma.OutReachActivitiesScalarFieldEnum = {
  ActivityID: 'ActivityID',
  FacultyID: 'FacultyID',
  ActivityType: 'ActivityType',
  ActivityTitle: 'ActivityTitle',
  InstitutionName: 'InstitutionName',
  ActivityDate: 'ActivityDate',
  Description: 'Description'
};

exports.Prisma.EventTypeScalarFieldEnum = {
  EventID: 'EventID',
  EventType: 'EventType'
};

exports.Prisma.EventsOrganisedScalarFieldEnum = {
  FacultyID: 'FacultyID',
  Event_id: 'Event_id',
  Title: 'Title',
  Organizer: 'Organizer',
  Location: 'Location',
  StartDate: 'StartDate',
  EndDate: 'EndDate',
  Description: 'Description',
  Role: 'Role',
  FundingAgency: 'FundingAgency'
};

exports.Prisma.AwardsScalarFieldEnum = {
  AwardID: 'AwardID',
  FacultyID: 'FacultyID',
  AwardName: 'AwardName',
  AwardingBody: 'AwardingBody',
  Location: 'Location',
  YearAwarded: 'YearAwarded'
};

exports.Prisma.TeachingExperienceScalarFieldEnum = {
  ExperienceID: 'ExperienceID',
  FacultyID: 'FacultyID',
  OrganizationName: 'OrganizationName',
  Designation: 'Designation',
  StartDate: 'StartDate',
  EndDate: 'EndDate',
  NatureOfWork: 'NatureOfWork'
};

exports.Prisma.CitationMetricsScalarFieldEnum = {
  MetricsID: 'MetricsID',
  FacultyID: 'FacultyID',
  YearRecorded: 'YearRecorded',
  Source: 'Source',
  HIndex: 'HIndex',
  I10Index: 'I10Index',
  TotalCitations: 'TotalCitations',
  ImpactFactor: 'ImpactFactor'
};

exports.Prisma.TYPESScalarFieldEnum = {
  TypeID: 'TypeID',
  Type: 'Type',
  Status: 'Status'
};

exports.Prisma.PublicationsScalarFieldEnum = {
  PublicationID: 'PublicationID',
  TypeID: 'TypeID',
  Authors: 'Authors',
  Title: 'Title',
  PublicationYear: 'PublicationYear',
  FundingAgency: 'FundingAgency'
};

exports.Prisma.JournalPublicationDetailsScalarFieldEnum = {
  PublicationID: 'PublicationID',
  Name: 'Name',
  VolumeNumber: 'VolumeNumber',
  IssueNumber: 'IssueNumber',
  ISSN_Number: 'ISSN_Number'
};

exports.Prisma.BookPublicationDetailsScalarFieldEnum = {
  PublicationID: 'PublicationID',
  Publisher: 'Publisher',
  Edition: 'Edition',
  VolumeNumber: 'VolumeNumber',
  ISBN_Number: 'ISBN_Number'
};

exports.Prisma.ConferencePaperDetailsScalarFieldEnum = {
  PublicationID: 'PublicationID',
  Publisher: 'Publisher',
  Location: 'Location',
  PageNumbers: 'PageNumbers'
};

exports.Prisma.FacultyPublicationLinkScalarFieldEnum = {
  PublicationID: 'PublicationID',
  FacultyID: 'FacultyID',
  TypeOfIndexing: 'TypeOfIndexing'
};

exports.Prisma.PatentsScalarFieldEnum = {
  TypeID: 'TypeID',
  FacultyID: 'FacultyID',
  Title: 'Title',
  FilingDate: 'FilingDate',
  PublicationDate: 'PublicationDate',
  PatentNumber: 'PatentNumber',
  Authority: 'Authority',
  CollaborationInstitute: 'CollaborationInstitute'
};

exports.Prisma.ResearchProjectsScalarFieldEnum = {
  TypeID: 'TypeID',
  FacultyID: 'FacultyID',
  Title: 'Title',
  FundingAgency: 'FundingAgency',
  StartDate: 'StartDate',
  EndDate: 'EndDate',
  Budget: 'Budget'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.event_type = exports.$Enums.event_type = {
  Workshop: 'Workshop',
  Seminar: 'Seminar',
  Conference: 'Conference',
  Other: 'Other'
};

exports.role_type = exports.$Enums.role_type = {
  Speaker: 'Speaker',
  Attendee: 'Attendee',
  Organizer: 'Organizer'
};

exports.publication_type = exports.$Enums.publication_type = {
  publication: 'publication',
  patent: 'patent',
  research_project: 'research_project'
};

exports.Prisma.ModelName = {
  Department: 'Department',
  Faculty: 'Faculty',
  SubjectTaught: 'SubjectTaught',
  FacultyQualification: 'FacultyQualification',
  OutReachActivities: 'OutReachActivities',
  EventType: 'EventType',
  EventsOrganised: 'EventsOrganised',
  Awards: 'Awards',
  TeachingExperience: 'TeachingExperience',
  CitationMetrics: 'CitationMetrics',
  TYPES: 'TYPES',
  Publications: 'Publications',
  JournalPublicationDetails: 'JournalPublicationDetails',
  BookPublicationDetails: 'BookPublicationDetails',
  ConferencePaperDetails: 'ConferencePaperDetails',
  FacultyPublicationLink: 'FacultyPublicationLink',
  Patents: 'Patents',
  ResearchProjects: 'ResearchProjects'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
