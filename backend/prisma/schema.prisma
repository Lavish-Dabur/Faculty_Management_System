generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  DepartmentID   Int       @id @default(autoincrement())
  DepartmentName String
  Faculty        Faculty[]
}

model Faculty {
  FacultyID     Int       @id @default(autoincrement())
  FirstName     String
  LastName      String
  Gender        String
  DOB           DateTime
  Role          String
  Phone_no      String
  Email         String    @unique
  Password      String    // hashed password, not plain text!
  DepartmentID  Int
  Department    Department @relation(fields: [DepartmentID], references: [DepartmentID])

  // Relations
  SubjectTaught             SubjectTaught[]
  FacultyQualification      FacultyQualification[]
  OutReachActivities        OutReachActivities[]
  EventsOrganised           EventsOrganised[]
  Awards                    Awards[]
  TeachingExperience        TeachingExperience[]
  CitationMetrics           CitationMetrics[]
  FacultyPublicationLink    FacultyPublicationLink[]
  Patents                   Patents[]
  ResearchProjects          ResearchProjects[]
}


model SubjectTaught {
  FacultyID    Int
  Level        String
  SubjectName  String
  CourseCode   String?
  ProgramName  String?
  Note         String?

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])

  @@id([FacultyID, Level, SubjectName])
}

model FacultyQualification {
  QualificationID  Int    @id @default(autoincrement())
  FacultyID        Int
  Degree           String
  Institution      String
  YearOfCompletion DateTime

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])
}

model OutReachActivities {
  ActivityID      Int    @id @default(autoincrement())
  FacultyID       Int
  ActivityType    String
  ActivityTitle   String
  InstitutionName String?
  ActivityDate    DateTime
  Description     String?

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])
}

enum event_type {
  Workshop
  Seminar
  Conference
  Other
}

model EventType {
  EventID   Int       @id
  EventType event_type
  EventsOrganised EventsOrganised[]
}

enum role_type {
  Speaker
  Attendee
  Organizer
}

model EventsOrganised {
  FacultyID     Int
  Event_id      Int
  Title         String
  Organizer     String?
  Location      String?
  StartDate     DateTime?
  EndDate       DateTime?
  Description   String?
  Role          role_type?
  FundingAgency String?

  Faculty Faculty   @relation(fields: [FacultyID], references: [FacultyID])
  Event   EventType @relation(fields: [Event_id], references: [EventID])

  @@id([FacultyID, Event_id])
}

model Awards {
  AwardID      Int    @id @default(autoincrement())
  FacultyID    Int
  AwardName    String
  AwardingBody String?
  Location     String?
  YearAwarded  Int

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])
}

model TeachingExperience {
  ExperienceID     Int    @id @default(autoincrement())
  FacultyID        Int
  OrganizationName String
  Designation      String
  StartDate        DateTime
  EndDate          DateTime?   
  NatureOfWork     String?

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])
}


model CitationMetrics {
  MetricsID      Int     @id @default(autoincrement())
  FacultyID      Int
  YearRecorded   Int
  Source         String
  HIndex         Int?
  I10Index       Int?
  TotalCitations Int?
  ImpactFactor   Decimal?

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])
}

enum publication_type {
  publication
  patent
  research_project
}

model TYPES {
  TypeID String          @id
  Type   publication_type
  Status String?
  Publications   Publications[]
  Patents        Patents[]
  ResearchProjects ResearchProjects[]
}

model Publications {
  PublicationID   Int     @id @default(autoincrement())
  TypeID          String
  Title           String
  PublicationYear DateTime
  FundingAgency   String?

  Type TYPES @relation(fields: [TypeID], references: [TypeID])

  JournalPublicationDetails JournalPublicationDetails?
  BookPublicationDetails    BookPublicationDetails?
  ConferencePaperDetails    ConferencePaperDetails?
  FacultyPublicationLink    FacultyPublicationLink[]  // junction
}

model FacultyPublicationLink {
  PublicationID  Int
  FacultyID      Int
  TypeOfIndexing String?

  Faculty     Faculty      @relation(fields: [FacultyID], references: [FacultyID])
  Publication Publications @relation(fields: [PublicationID], references: [PublicationID])

  @@id([PublicationID, FacultyID]) // composite primary key
}


model JournalPublicationDetails {
  PublicationID Int    @id
  Name          String?
  VolumeNumber  String?
  IssueNumber   String?
  ISSN_Number   Int?

  Publication Publications @relation(fields: [PublicationID], references: [PublicationID])
}

model BookPublicationDetails {
  PublicationID Int    @id
  Publisher     String?
  Edition       String?
  VolumeNumber  String?
  ISBN_Number   String?

  Publication Publications @relation(fields: [PublicationID], references: [PublicationID])
}

model ConferencePaperDetails {
  PublicationID Int    @id
  Publisher     String?
  Location      String?
  PageNumbers   String?

  Publication Publications @relation(fields: [PublicationID], references: [PublicationID])
}

model Patents {
  TypeID     String
  FacultyID  Int
  Title      String
  FilingDate DateTime
  PublicationDate DateTime?
  PatentNumber    String
  Authority       String?
  CollaborationInstitute String?

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])
  Type    TYPES   @relation(fields: [TypeID], references: [TypeID])

  @@id([TypeID, FacultyID])
}

model ResearchProjects {
  TypeID        String
  FacultyID     Int
  Title         String
  FundingAgency String?
  StartDate     DateTime
  EndDate       DateTime?
  Budget        Decimal?

  Faculty Faculty @relation(fields: [FacultyID], references: [FacultyID])
  Type    TYPES   @relation(fields: [TypeID], references: [TypeID])

  @@id([TypeID, FacultyID])
}
